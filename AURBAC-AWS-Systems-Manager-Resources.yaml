Description: Create a VPC with 2 public subnets and Linux/Windows instances by Uriel
  Ramirez
Mappings:
  AmazonLinuxMap:
    ap-northeast-1:
      AMI: ami-00f9d04b3b3092052
    ap-northeast-2:
      AMI: ami-0c764df09c35858b8
    ap-south-1:
      AMI: ami-00796998f258969fd
    ap-southeast-1:
      AMI: ami-085fd1bd447be68e8
    ap-southeast-2:
      AMI: ami-0b8dea0e70b969adc
    ca-central-1:
      AMI: ami-05cac140c6a1fb960
    eu-central-1:
      AMI: ami-02ea8f348fa28c108
    eu-west-1:
      AMI: ami-0a5e707736615003c
    eu-west-2:
      AMI: ami-017b0e29fac27906b
    eu-west-3:
      AMI: ami-04992646d54c69ef4
    sa-east-1:
      AMI: ami-0160a8b6087883cb6
    us-east-1:
      AMI: ami-013be31976ca2c322
    us-east-2:
      AMI: ami-0350c5670171b5391
    us-west-1:
      AMI: ami-01beb64058d271bc4
    us-west-2:
      AMI: ami-061e7ebbc234015fe
  Windows2012Map:
    ap-northeast-1:
      AMI: ami-0a45b66bda01c89c8
    ap-northeast-2:
      AMI: ami-0b3a3970b73d5b63a
    ap-south-1:
      AMI: ami-0bd1dc65d74266ee2
    ap-southeast-1:
      AMI: ami-0bf96f139bff648cc
    ap-southeast-2:
      AMI: ami-0664c039c4dea5193
    ca-central-1:
      AMI: ami-0a27bbef221046aae
    eu-central-1:
      AMI: ami-0d55859ee09a59138
    eu-west-1:
      AMI: ami-01dbaf1c50a36891d
    eu-west-2:
      AMI: ami-0a7551990da17b8d6
    eu-west-3:
      AMI: ami-040ef025ec13d58bf
    sa-east-1:
      AMI: ami-01d74c2e93478e2f5
    us-east-1:
      AMI: ami-0fba87d7f8c8744d4
    us-east-2:
      AMI: ami-0679e5ac84d15f15e
    us-west-1:
      AMI: ami-04370c2a300903acc
    us-west-2:
      AMI: ami-02e27664434db6def
  Windows2016Map:
    ap-northeast-1:
      AMI: ami-0134dae8964ea643c
    ap-northeast-2:
      AMI: ami-0c6a4d561b38c05ed
    ap-south-1:
      AMI: ami-0e9c4931f7c9d73f6
    ap-southeast-1:
      AMI: ami-098731bcd06ea9ca6
    ap-southeast-2:
      AMI: ami-0096a7a7add65af89
    ca-central-1:
      AMI: ami-04a4290c9c20574d9
    eu-central-1:
      AMI: ami-06af8c775c56b30ca
    eu-west-1:
      AMI: ami-0cd8a780065ea078f
    eu-west-2:
      AMI: ami-0f5f78829606035fc
    eu-west-3:
      AMI: ami-0152e5e7567b014fc
    sa-east-1:
      AMI: ami-0c3faf6ff12a7f005
    us-east-1:
      AMI: ami-050202fb72f001b47
    us-east-2:
      AMI: ami-028779930ada5200c
    us-west-1:
      AMI: ami-08838e38cfe4854ad
    us-west-2:
      AMI: ami-017bf00eb0d4c7182
Outputs:
  PublicSubnetId1:
    Description: PublicSubnetId1
    Export:
      Name: !Sub '${AWS::StackName}-public-subnet-id-1'
    Value: !Ref 'PublicSubnet1'
  PublicSubnetId2:
    Description: PublicSubnetId2
    Export:
      Name: !Sub '${AWS::StackName}-public-subnet-id-2'
    Value: !Ref 'PublicSubnet2'
  VpcId:
    Description: VpcId
    Export:
      Name: !Sub '${AWS::StackName}-vpc-id'
    Value: !Ref 'Vpc'
Parameters:
  CidrBlockPublicSubnet1:
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    Default: 10.0.0.0/24
    Description: Cidr block for the public subnet 1.
    Type: String
  CidrBlockPublicSubnet2:
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    Default: 10.0.1.0/24
    Description: Cidr block for the public subnet 2.
    Type: String
  CidrBlockVpc:
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    Default: 10.0.0.0/16
    Description: Cidr block for the VPC.
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH and RDP access to the
      instance
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  AttachGateway:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::VPCGatewayAttachment
  IGRoute:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  InternetGateway:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
    Type: AWS::EC2::InternetGateway
  LinuxInstance:
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: 16
            VolumeType: gp2
      IamInstanceProfile: !Ref 'LinuxInstanceProfile'
      ImageId: !FindInMap
        - AmazonLinuxMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
          GroupSet:
            - !Ref 'LinuxSecurityGroup'
          SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: SSM-AmazonLinux2
      UserData: !Base64 '80'
    Type: AWS::EC2::Instance
  LinuxInstanceProfile:
    Properties:
      Roles:
        - !Ref 'LinuxRole'
    Type: AWS::IAM::InstanceProfile
  LinuxRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
    Type: AWS::IAM::Role
  LinuxSecurityGroup:
    Properties:
      GroupDescription: EC2 Instance Security Group
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - -Linux
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: '0.0.0.0/0'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::SecurityGroup
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: public
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref 'CidrBlockPublicSubnet1'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: public-subnet-1
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref 'CidrBlockPublicSubnet2'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: public-subnet-2
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::Subnet
  PublicSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Vpc:
    Properties:
      CidrBlock: !Ref 'CidrBlockVpc'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
    Type: AWS::EC2::VPC
  Windows2012Instance:
    Properties:
      IamInstanceProfile: !Ref 'WindowsInstanceProfile'
      ImageId: !FindInMap
        - Windows2012Map
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.medium
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
          GroupSet:
            - !Ref 'WindowsSecurityGroup'
          SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: SSM-Windows2012
      UserData: !Base64 '80'
    Type: AWS::EC2::Instance
  Windows2016Instance:
    Properties:
      IamInstanceProfile: !Ref 'WindowsInstanceProfile'
      ImageId: !FindInMap
        - Windows2016Map
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.medium
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
          GroupSet:
            - !Ref 'WindowsSecurityGroup'
          SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: SSM-Windows2016
      UserData: !Base64 '80'
    Type: AWS::EC2::Instance
  WindowsInstanceProfile:
    Properties:
      Roles:
        - !Ref 'WindowsRole'
    Type: AWS::IAM::InstanceProfile
  WindowsRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
    Type: AWS::IAM::Role
  WindowsSecurityGroup:
    Properties:
      GroupDescription: EC2 Instance Security Group
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - -Windows
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: '0.0.0.0/0'
          FromPort: '3389'
          IpProtocol: tcp
          ToPort: '3389'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::SecurityGroup

